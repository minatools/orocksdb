load("@rules_foreign_cc//tools/build_defs:configure.bzl", "configure_make")
load("@rules_foreign_cc//tools/build_defs:make.bzl", "make")

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_signature",
    "ocaml_module",
    "ocaml_ns_archive",
)

# load("@obazl_rules_ocaml//ocaml:macros.bzl", "ns_env")
# ns_env( aliases = glob(["*.ml"]) )

################################################################
## STANZA 1: LIBRARY ROCKS
################################################################
ROCKS_SIGNATURE_OPTS = []

ROCKS_MODULE_OPTS = []

ROCKS_NS_MODULE_OPTS = []

ROCKS_OPAM_DEPS = [
    "ctypes",
    "ctypes.foreign",
]

#############
ocaml_module(
    name = "rocks",
    struct = "rocks.ml",
    sig  = ":_Rocks.cmi",
    # ns_env = ":_ns_env",
    opts = ROCKS_MODULE_OPTS + [
        "-w", "-6", # Error (warning 6): label length was omitted in the application of this function.
        "-w", "-27", # Error (warning 27): unused variable opts.
        "-w", "-32", # Error (warning 32): unused value
        "-w", "-34" # Error (warning 34): unused type
    ] + select({
        "//bzl/host:macos": [
            # "-ccopt", "-lc++"  ## this is already the default for macos
            # "-ccopt", "-lc++abi",
        ],
        "//bzl/host:linux": ["-ccopt", "-lstdc++"],
    }, no_match_error = "Unsupported platform. Only Linux and MacOS supported."),
    deps_opam = ROCKS_OPAM_DEPS,
	deps = [
        # do not sort (buildifier)
        ":_Rocks_common",
        ":_Rocks_intf",
        ":_Rocks_options",
        # ":_Rocks_version",
    ],
    cc_deps = {
        ":bzip2": "static-linkall",
        ":zlib": "static-linkall", # "default",
        ":librocksdb": "static-linkall"
    },
    visibility = ["//visibility:public"]
)

#####
ocaml_signature(
    name   = "_Rocks.cmi",
    src    = "rocks.mli",
    # ns_env = ":_ns_env",
    opts = ROCKS_SIGNATURE_OPTS,
    deps_opam = ROCKS_OPAM_DEPS,
	deps = [
        # do not sort (buildifier)
        ":_Rocks_common",
        ":_Rocks_intf",
        ":_Rocks_options",
        # ":_Rocks_version",
    ],
)

#############
ocaml_module(
    name      = "_Rocks_common",
    struct    = "rocks_common.ml",
    # ns_env    = ":_ns_env",
    opts      = ROCKS_MODULE_OPTS,
    deps_opam = ROCKS_OPAM_DEPS,
)

#############
ocaml_module(
    name = "_Rocks_intf",
    struct = "rocks_intf.ml",
    # ns_env = ":_ns_env",
    opts = ROCKS_MODULE_OPTS + [
        "-w",
        "-50" # Error (warning 50): ambiguous documentation comment
    ],
    deps_opam = ROCKS_OPAM_DEPS,
	deps = [
        ":_Rocks_options",
    ],
)

#############
ocaml_module(
    name = "_Rocks_options",
    struct = "rocks_options.ml",
    # ns_env = ":_ns_env",
    opts = ROCKS_MODULE_OPTS,
    deps_opam = ROCKS_OPAM_DEPS,
	deps = [
        ":_Rocks_common",
    ],
)

#############
## this module is added in a more recent version of the lib
# ocaml_module(
#     name = "_Rocks_version",
#     struct = "rocks_version.ml",
#     # ns_env = ":rocks_ns",
#     opts = ROCKS_MODULE_OPTS,
#     deps_opam = ROCKS_OPAM_DEPS,
#     deps = [
#         # ":_Rocks_common",
#     ],
# )

################################################################
# TODO: number of jobs for Linux, Darwin
# NOTICE: shared libs work for v6.0.1

ENV_VARS = " ".join([
    # "env",
    "ROCKSDB_DISABLE_SNAPPY=1",
    "ROCKSDB_DISABLE_GFLAGS=1",
    "ROCKSDB_DISABLE_LZ4=1",
    "ROCKSDB_DISABLE_ZSTD=1",
    "ROCKSDB_DISABLE_NUMA=1",
    "ROCKSDB_DISABLE_TBB=1",
    "ROCKSDB_DISABLE_JEMALLOC=1",
    "ROCKSDB_DISABLE_TCMALLOC=1",
    "ROCKSDB_DISABLE_BACKTRACE=1",
    "PORTABLE=1",
    "FORCE_SSE42=1",
    "DISABLE_WARNING_AS_ERROR=1",
    "VERBOSE=1",
    "INSTALL_PATH=${INSTALLDIR}", # v5.17.2, v6.0.1
    "PREFIX=${INSTALLDIR}", # v6.14.5
])

VERSION_MAJOR = "5"
VERSION_MINOR = "17"
VERSION_PATCH = "2"

make(
    name = "librocksdb",
    lib_source = "@rocksdb//:all", # mandatory
    out_lib_dir = "lib",
    prefix = "${INSTALLDIR}",
    visibility = ["//visibility:public"],
    static_libraries = ["librocksdb.a"],
    shared_libraries = select({
        "//bzl/host:macos": [
            "librocksdb.dylib",
            "librocksdb.{major}.dylib".format(
                major=VERSION_MAJOR
            ),
            "librocksdb.{major}.{minor}.dylib".format(
                major=VERSION_MAJOR, minor=VERSION_MINOR
            ),
             "librocksdb.{major}.{minor}.{patch}.dylib".format(
                 major=VERSION_MAJOR, minor=VERSION_MINOR, patch=VERSION_PATCH
             ),
        ],
        "//bzl/host:linux": [
            "librocksdb.so",
            "librocksdb.so.{major}".format(
                major=VERSION_MAJOR
            ),
            "librocksdb.so.{major}.{minor}".format(
                major=VERSION_MAJOR, minor=VERSION_MINOR
            ),
             "librocksdb.so.{major}.{minor}.{patch}".format(
                 major=VERSION_MAJOR, minor=VERSION_MINOR, patch=VERSION_PATCH
             ),
        ]
    }, no_match_error = "Unsupported platform. MacOS or Linux only."),
    make_env_vars = {
        "PREFIX": "${INSTALLDIR}",
        "VERBOSE": "1"
    },
    make_commands = [
        " ".join([
            # "INSTALL_PATH=${INSTALLDIR}", # v6.0.1
            "make",
            # "install", ## both static and shared
            "install-shared",
            "-j2",
        ]) + " " + ENV_VARS,
        " ".join([
            # "INSTALL_PATH=${INSTALLDIR}", # v6.0.1
            "make",
            "install-static",
            "-j2",
        ]) + " " + ENV_VARS,
    ],
)

#####
make(
    name = "bzip2",
    lib_source = "@rocksdb-bzip2//:all",
    static_libraries = ["libbz2.a"],
    # shared_libraries = select({
    #     "//bzl/host:macos": ["libbz2.dylib"],
    #     "//bzl/host:linux": ["libbz2.so"],
    # }, no_match_error = "Uknown host. Only MacOS and Linux."),
    visibility = ["//visibility:public"], # temporarily, until cc_dep transitivity
)

###############
configure_make(
    name = "zlib",
    lib_source = "@rocksdb-zlib//:all",
    static_libraries = ["libz.a"],
    shared_libraries = select({
        "//bzl/host:macos": ["libz.dylib"],
        "//bzl/host:linux": ["libz.so"]
    }, no_match_error = "Unknown host. Only MacOS and Linux."),
    out_lib_dir = "lib",
    configure_env_vars = select({
        "//bzl/host:macos": {"AR": ""},
        "//conditions:default": {},
    }),
    visibility = ["//visibility:public"], # temporarily, until cc_dep transitivity
)
